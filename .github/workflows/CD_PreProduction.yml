name: Build and deploy to pre-production
# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [master]
  pull_request:
    branches: [master]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build_and_push_to_digital_ocean:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Create client Env file
        working-directory: ./client
        run: |
          touch .env
          echo APP_SECRET=${{ secrets.APP_SECRET }} >> .env
          echo MONGODB_URI=${{ secrets.CLIENT_MONGO_URI }} >> .env
          echo MSG_QUEUE_URL=${{ secrets.MSG_QUEUE_URL }} >> .env
          echo EXCHANGE_NAME=${{ secrets.EXCHANGE_NAME }} >> .env
          cat .env
      - name: Create client Env for offers
        working-directory: ./specials
        run: |
          touch .env
          echo APP_SECRET=${{ secrets.APP_SECRET }} >> .env
          echo MONGODB_URI=${{ secrets.CLIENT_MONGO_URI }} >> .env
          echo MSG_QUEUE_URL=${{ secrets.MSG_QUEUE_URL }} >> .env
          echo EXCHANGE_NAME=${{ secrets.EXCHANGE_NAME }} >> .env
          cat .env

      - name: Create technician Env file
        working-directory: ./technician
        run: |
          touch .env
          echo APP_SECRET=${{ secrets.APP_SECRET }} >> .env
          echo MONGODB_URI=${{ secrets.TECHNICIAN_MONGO_URI }} >> .env
          echo MSG_QUEUE_URL=${{ secrets.MSG_QUEUE_URL }} >> .env
          echo EXCHANGE_NAME=${{ secrets.EXCHANGE_NAME }} >> .env
          cat .env

      - name: Create billing Env file
        working-directory: ./billing
        run: |
          touch .env
          echo APP_SECRET=${{ secrets.APP_SECRET }} >> .env
          echo MONGODB_URI=${{ secrets.BILLING_MONGO_URI }} >> .env
          echo MSG_QUEUE_URL=${{ secrets.MSG_QUEUE_URL }} >> .env
          echo EXCHANGE_NAME=${{ secrets.EXCHANGE_NAME }} >> .env
          cat .env

      - name: Create deliveries Env file
        working-directory: ./deliveries
        run: |
          touch .env
          echo APP_SECRET=${{ secrets.APP_SECRET }} >> .env
          echo MONGODB_URI=${{ secrets.DELIVERIES_MONGO_URI }} >> .env
          echo MSG_QUEUE_URL=${{ secrets.MSG_QUEUE_URL }} >> .env
          echo EXCHANGE_NAME=${{ secrets.EXCHANGE_NAME }} >> .env
          cat .env

      - name: Create fault Env file
        working-directory: ./fault
        run: |
          touch .env
          echo APP_SECRET=${{ secrets.APP_SECRET }} >> .env
          echo MONGODB_URI=${{ secrets.FAULT_MONGO_URI }} >> .env
          echo MSG_QUEUE_URL=${{ secrets.MSG_QUEUE_URL }} >> .env
          echo EXCHANGE_NAME=${{ secrets.EXCHANGE_NAME }} >> .env
          cat .env
      - name: Create subscriptions Env file
        working-directory: ./subscriptions
        run: |
          touch .env
          echo APP_SECRET=${{ secrets.APP_SECRET }} >> .env
          echo MONGODB_URI=${{ secrets.FAULT_MONGO_URI }} >> .env
          echo MSG_QUEUE_URL=${{ secrets.MSG_QUEUE_URL }} >> .env
          echo EXCHANGE_NAME=${{ secrets.EXCHANGE_NAME }} >> .env
          cat .env

      - name: Create recycling management Env file
        working-directory: ./recycling
        run: |
          touch .env
          echo APP_SECRET=${{ secrets.APP_SECRET }} >> .env
          echo MONGODB_URI=${{ secrets.RECYCLING_MONGO_URI }} >> .env
          echo MSG_QUEUE_URL=${{ secrets.MSG_QUEUE_URL }} >> .env
          echo EXCHANGE_NAME=${{ secrets.EXCHANGE_NAME }} >> .env
          cat .env

      - name: Create unit management Env file
        working-directory: ./unit
        run: |
          touch .env
          echo APP_SECRET=${{ secrets.APP_SECRET }} >> .env
          echo MONGODB_URI=${{ secrets.UNIT_MONGO_URI }} >> .env
          echo MSG_QUEUE_URL=${{ secrets.MSG_QUEUE_URL }} >> .env
          echo EXCHANGE_NAME=${{ secrets.EXCHANGE_NAME }} >> .env
          cat .env

      - name: Create utility management Env file
        working-directory: ./utility
        run: |
          touch .env
          echo APP_SECRET=${{ secrets.APP_SECRET }} >> .env
          echo MONGODB_URI=${{ secrets.UTILITY_MONGO_URI }} >> .env
          echo MSG_QUEUE_URL=${{ secrets.MSG_QUEUE_URL }} >> .env
          echo EXCHANGE_NAME=${{ secrets.EXCHANGE_NAME }} >> .env
          cat .env
      
      - name: Create services management Env file
        working-directory: ./services
        run: |
          touch .env
          echo APP_SECRET=${{ secrets.APP_SECRET }} >> .env
          echo MONGODB_URI=${{ secrets.UTILITY_MONGO_URI }} >> .env
          echo MSG_QUEUE_URL=${{ secrets.MSG_QUEUE_URL }} >> .env
          echo EXCHANGE_NAME=${{ secrets.EXCHANGE_NAME }} >> .env
          cat .env

      - name: Create notification management Env file
        working-directory: ./notification
        run: |
          touch .env
          echo APP_SECRET=${{ secrets.APP_SECRET }} >> .env
          echo MAILGUN_API_KEY=${{ secrets.MAILGUN_API_KEY }} >> .env
          echo URL=${{ secrets.MAILGUN_URL }} >> .env
          echo SITE_DOMAIN=${{ secrets.MAILGUN_SITE_DOMAIN }} >> .env
          echo MONGODB_URI=${{ secrets.NOTIFICATION_MONGO_URI }} >> .env
          echo MSG_QUEUE_URL=${{ secrets.MSG_QUEUE_URL }} >> .env
          echo EXCHANGE_NAME=${{ secrets.EXCHANGE_NAME }} >> .env
          cat .env

      - name: docker login
        env:
          DOCKERHUB_USERNAME: ${{secrets.DOCKERHUB_USERNAME}}
          DOCKERHUB_TOKEN: ${{secrets.DOCKERHUB_TOKEN}}
        run: |
          docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_TOKEN

      - name: Build image
        run: docker-compose build

      - name: Push image to docker hub
        run: |
          docker push eagleapps/client:latest
          docker push eagleapps/nginx-proxy:latest
          docker push eagleapps/utility:latest
          docker push eagleapps/technician:latest
          docker push eagleapps/fault:latest
          docker push eagleapps/notification:latest
          docker push eagleapps/services:latest
          docker push eagleapps/specials:latest
          docker push eagleapps/subscriptions:latest
          docker push eagleapps/unit:latest
          
      - name: Remove Images And Container
        env:
          DOCKERHUB_USERNAME: ${{secrets.DOCKERHUB_USERNAME}}
          DOCKERHUB_TOKEN: ${{secrets.DOCKERHUB_TOKEN}}
        run: |
          echo "${{secrets.SSH_PRIVATE_KEY}}" > private_key && chmod 600 private_key
          
          ssh -o StrictHostKeyChecking=no -i private_key ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}<<EOF
          
          # Now we have got the access of EC2 and we will start the deploy .

          # Stop all running containers:
          docker stop $(docker ps -q) || true

          # Remove all containers (both stopped and running)
          docker rm -f $(docker ps -aq) || true
          
          # Delete all Docker images
          docker rmi -f $(docker images -q) || true
          EOF
      - name: Pull Docker Images
        env:
          DOCKERHUB_USERNAME: ${{secrets.DOCKERHUB_USERNAME}}
          DOCKERHUB_TOKEN: ${{secrets.DOCKERHUB_TOKEN}}
        run: |
          echo "${{secrets.SSH_PRIVATE_KEY}}" > private_key && chmod 600 private_key
          
          ssh -o StrictHostKeyChecking=no -i private_key ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}<<EOF
          
          #Now we have got the access of EC2 and we will start the deploy .
         
          docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_TOKEN
          docker pull eagleapps/client:latest
          docker pull eagleapps/nginx-proxy:latest
          docker pull eagleapps/utility:latest
          docker pull eagleapps/technician:latest
          docker pull eagleapps/fault:latest
          docker pull eagleapps/notification:latest
          docker pull eagleapps/services:latest
          docker pull eagleapps/specials:latest
          docker pull eagleapps/subscriptions:latest
          docker pull eagleapps/unit:latest
          EOF
      - name: Run Docker Services
        env:
          DOCKERHUB_USERNAME: ${{secrets.DOCKERHUB_USERNAME}}
          DOCKERHUB_TOKEN: ${{secrets.DOCKERHUB_TOKEN}}
        run: |
          echo "${{secrets.SSH_PRIVATE_KEY}}" > private_key && chmod 600 private_key
          
          ssh -o StrictHostKeyChecking=no -i private_key ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}<<EOF
          
          #Now we have got the access of EC2 and we will start the deploy .
          docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_TOKEN
          docker run -d -p 8001:8001 eagleapps/client:latest
          docker run -d -p 8081:8081 eagleapps/nginx-proxy:latest
          docker run -d -p 8003:8003 eagleapps/utility:latest
          docker run -d -p 4004:4004 eagleapps/technician:latest
          docker run -d -p 8002:8002 eagleapps/fault:latest
          docker run -d -p 8006:8006 eagleapps/notification:latest
          docker run -d -p 6008:6008 eagleapps/services:latest
          docker run -d -p 6009:6009 eagleapps/specials:latest
          docker run -d -p 7001:7001 eagleapps/subscriptions:latest
          docker run -d -p 9005:9005 eagleapps/unit:latest
          EOF