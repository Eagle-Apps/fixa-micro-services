name: Build and deploy to pre-production
# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [master]
  pull_request:
    branches: [master]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build_and_push_to_digital_ocean:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Create client Env file
        working-directory: ./client
        run: |
          touch .env
          echo APP_SECRET=${{ secrets.APP_SECRET }} >> .env
          echo MONGODB_URI=${{ secrets.CLIENT_MONGO_URI }} >> .env
          echo MSG_QUEUE_URL=${{ secrets.MSG_QUEUE_URL }} >> .env
          echo EXCHANGE_NAME=${{ secrets.EXCHANGE_NAME }} >> .env
          cat .env
      - name: Create technician Env file
        working-directory: ./technician
        run: |
          touch .env
          echo APP_SECRET=${{ secrets.APP_SECRET }} >> .env
          echo MONGODB_URI=${{ secrets.TECHNICIAN_MONGO_URI }} >> .env
          echo MSG_QUEUE_URL=${{ secrets.MSG_QUEUE_URL }} >> .env
          echo EXCHANGE_NAME=${{ secrets.EXCHANGE_NAME }} >> .env
          cat .env
      - name: Create billing Env file
        working-directory: ./billing
        run: |
          touch .env
          echo APP_SECRET=${{ secrets.APP_SECRET }} >> .env
          echo MONGODB_URI=${{ secrets.BILLING_MONGO_URI }} >> .env
          echo MSG_QUEUE_URL=${{ secrets.MSG_QUEUE_URL }} >> .env
          echo EXCHANGE_NAME=${{ secrets.EXCHANGE_NAME }} >> .env
          cat .env
      - name: Create deliveries Env file
        working-directory: ./deliveries
        run: |
          touch .env
          echo APP_SECRET=${{ secrets.APP_SECRET }} >> .env
          echo MONGODB_URI=${{ secrets.DELIVERIES_MONGO_URI }} >> .env
          echo MSG_QUEUE_URL=${{ secrets.MSG_QUEUE_URL }} >> .env
          echo EXCHANGE_NAME=${{ secrets.EXCHANGE_NAME }} >> .env
          cat .env
      - name: Create fault Env file
        working-directory: ./fault
        run: |
          touch .env
          echo APP_SECRET=${{ secrets.APP_SECRET }} >> .env
          echo MONGODB_URI=${{ secrets.FAULT_MONGO_URI }} >> .env
          echo MSG_QUEUE_URL=${{ secrets.MSG_QUEUE_URL }} >> .env
          echo EXCHANGE_NAME=${{ secrets.EXCHANGE_NAME }} >> .env
          cat .env
      - name: Create recycling management Env file
        working-directory: ./recycling
        run: |
          touch .env
          echo APP_SECRET=${{ secrets.APP_SECRET }} >> .env
          echo MONGODB_URI=${{ secrets.RECYCLING_MONGO_URI }} >> .env
          echo MSG_QUEUE_URL=${{ secrets.MSG_QUEUE_URL }} >> .env
          echo EXCHANGE_NAME=${{ secrets.EXCHANGE_NAME }} >> .env
          cat .env
      - name: Create unit management Env file
        working-directory: ./unit
        run: |
          touch .env
          echo APP_SECRET=${{ secrets.APP_SECRET }} >> .env
          echo MONGODB_URI=${{ secrets.UNIT_MONGO_URI }} >> .env
          echo MSG_QUEUE_URL=${{ secrets.MSG_QUEUE_URL }} >> .env
          echo EXCHANGE_NAME=${{ secrets.EXCHANGE_NAME }} >> .env
          cat .env
      - name: Create utility management Env file
        working-directory: ./utility
        run: |
          touch .env
          echo APP_SECRET=${{ secrets.APP_SECRET }} >> .env
          echo MONGODB_URI=${{ secrets.UTILITY_MONGO_URI }} >> .env
          echo MSG_QUEUE_URL=${{ secrets.MSG_QUEUE_URL }} >> .env
          echo EXCHANGE_NAME=${{ secrets.EXCHANGE_NAME }} >> .env
          cat .env
      - name: Create notification management Env file
        working-directory: ./notification
        run: |
          touch .env
          echo APP_SECRET=${{ secrets.APP_SECRET }} >> .env
          echo MAILGUN_API_KEY=${{ secrets.MAILGUN_API_KEY }} >> .env
          echo URL=${{ secrets.MAILGUN_URL }} >> .env
          echo SITE_DOMAIN=${{ secrets.MAILGUN_SITE_DOMAIN }} >> .env
          echo MONGODB_URI=${{ secrets.NOTIFICATION_MONGO_URI }} >> .env
          echo MSG_QUEUE_URL=${{ secrets.MSG_QUEUE_URL }} >> .env
          echo EXCHANGE_NAME=${{ secrets.EXCHANGE_NAME }} >> .env
          cat .env
      - name: docker login
        env:
          DOCKERHUB_USERNAME: ${{secrets.DOCKERHUB_USERNAME}}
          DOCKERHUB_TOKEN: ${{secrets.DOCKERHUB_TOKEN}}
        run: |
          docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_TOKEN
      - name: Build image
        run: docker-compose build
      - name: Push image to docker hub
        run: |
          docker push eagleapps/utility:latest
          docker push eagleapps/nginx-proxy:latest
          docker push eagleapps/utility:latest
          docker push eagleapps/technician:latest
          docker push eagleapps/fault:latest
          docker push eagleapps/notification:latest

      - name: Install doctl # install the doctl on the runner
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DO Container Registry
        run: doctl registry login --expiry-seconds 600

      - name: Tag image
        #run: docker tag fixa-micro-services_nginx-proxy registry.digitalocean.com/fixapplication/fixa-micro-services_nginx-proxy
        run: docker tag eagleapps/nginx-proxy registry.digitalocean.com/fixapplication/fixa-micro-services_nginx-proxy:latest
      - name: Push image to digitalocean
        run: docker push registry.digitalocean.com/fixapplication/fixa-micro-services_nginx-proxy:latest
